@model string

<div class="modal fade" id="callModal" tabindex="-1" aria-labelledby="callModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="callModalLabel">Cuộc gọi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <i class="fas fa-phone fa-3x text-primary"></i>
                </div>
                <h5 id="callStatus">Đang kết nối...</h5>
                <p id="callTimer" class="text-muted">00:00</p>
                <div id="callControls" class="d-flex justify-content-center gap-3">
                    <button type="button" class="btn btn-danger" onclick="endCall()">
                        <i class="fas fa-phone-slash"></i>
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="toggleMute()">
                        <i id="muteIcon" class="fas fa-microphone"></i>
                    </button>
                </div>
                <div id="incomingCallButtons" class="mt-3 d-none">
                    <button type="button" class="btn btn-success me-2" onclick="acceptCall()">
                        <i class="fas fa-phone me-2"></i>Chấp nhận
                    </button>
                    <button type="button" class="btn btn-danger" onclick="rejectCall()">
                        <i class="fas fa-phone-slash me-2"></i>Từ chối
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        let callTimer;
        let callStartTime;
        let isMuted = false;
        let localStream;
        let peerConnection;
        let connection;
        let isCallActive = false;
        let isIncomingCall = false;

        // Khởi tạo kết nối SignalR
        async function initializeSignalR() {
            try {
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/notificationHub")
                    .withAutomaticReconnect()
                    .build();

                // Xử lý sự kiện nhận yêu cầu cuộc gọi
                connection.on("ReceiveCallRequest", async (callerId, callerName) => {
                    try {
                        isIncomingCall = true;
                        const callModal = new bootstrap.Modal(document.getElementById('callModal'));
                        document.getElementById('callStatus').textContent = `Cuộc gọi đến từ ${callerName}`;
                        document.getElementById('callStatus').className = '';
                        document.getElementById('callControls').classList.add('d-none');
                        document.getElementById('incomingCallButtons').classList.remove('d-none');
                        document.getElementById('callModal').dataset.callerId = callerId;
                        callModal.show();
                    } catch (error) {
                        console.error("Error handling incoming call request:", error);
                        showError("Không thể xử lý cuộc gọi đến");
                    }
                });

                // Xử lý sự kiện cuộc gọi bị từ chối
                connection.on("CallRejected", () => {
                    showError("Cuộc gọi bị từ chối");
                    endCall();
                });

                // Xử lý sự kiện cuộc gọi được chấp nhận
                connection.on("CallAccepted", async (callerId) => {
                    try {
                        await startWebRTCConnection(callerId, true);
                    } catch (error) {
                        console.error("Error handling call acceptance:", error);
                        showError("Không thể thiết lập cuộc gọi");
                        endCall();
                    }
                });

                // Xử lý sự kiện nhận offer
                connection.on("ReceiveCallOffer", async (offerJson, callerId) => {
                    try {
                        const offer = JSON.parse(offerJson);
                        await handleIncomingCall(offer, callerId);
                    } catch (error) {
                        console.error("Error handling incoming call:", error);
                        showError("Không thể xử lý cuộc gọi đến");
                    }
                });

                // Xử lý sự kiện nhận answer
                connection.on("ReceiveCallAnswer", async (answerJson) => {
                    try {
                        if (peerConnection && peerConnection.signalingState !== "closed") {
                            const answer = JSON.parse(answerJson);
                            await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
                        }
                    } catch (error) {
                        console.error("Error setting remote description:", error);
                        showError("Không thể thiết lập kết nối");
                    }
                });

                // Xử lý sự kiện nhận ICE candidate
                connection.on("ReceiveIceCandidate", async (candidateJson) => {
                    try {
                        if (peerConnection && peerConnection.signalingState !== "closed") {
                            const candidate = JSON.parse(candidateJson);
                            await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                        }
                    } catch (error) {
                        console.error("Error adding ICE candidate:", error);
                    }
                });

                // Xử lý sự kiện kết nối đóng
                connection.on("CallEnded", () => {
                    endCall();
                });

                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.error("SignalR Connection Error:", err);
                showError("Không thể kết nối đến máy chủ");
            }
        }

        // Khởi tạo SignalR khi trang được tải
        initializeSignalR();

        function showError(message) {
            const callStatus = document.getElementById('callStatus');
            if (callStatus) {
                callStatus.textContent = message;
                callStatus.className = 'text-danger';
            }
        }

        async function startCall(targetUserId) {
            try {
                if (isCallActive) {
                    console.log("Call already in progress");
                    return;
                }

                // Hiển thị modal
                const callModal = new bootstrap.Modal(document.getElementById('callModal'));
                document.getElementById('callControls').classList.remove('d-none');
                document.getElementById('incomingCallButtons').classList.add('d-none');
                callModal.show();

                // Gửi yêu cầu cuộc gọi
                await connection.invoke("RequestCall", targetUserId);
                document.getElementById('callStatus').textContent = 'Đang đợi phản hồi...';
                document.getElementById('callStatus').className = '';
            } catch (error) {
                console.error('Error starting call:', error);
                showError('Không thể bắt đầu cuộc gọi');
                endCall();
            }
        }

        async function acceptCall() {
            try {
                if (!isIncomingCall) return;

                const callerId = document.getElementById('callModal').dataset.callerId;
                await connection.invoke("AcceptCall", callerId);
                await startWebRTCConnection(callerId, false);
            } catch (error) {
                console.error('Error accepting call:', error);
                showError('Không thể chấp nhận cuộc gọi');
                endCall();
            }
        }

        async function rejectCall() {
            try {
                if (!isIncomingCall) return;

                const callerId = document.getElementById('callModal').dataset.callerId;
                await connection.invoke("RejectCall", callerId);
                endCall();
            } catch (error) {
                console.error('Error rejecting call:', error);
                showError('Không thể từ chối cuộc gọi');
            }
        }

        async function startWebRTCConnection(targetUserId, isIncoming) {
            try {
                // Khởi tạo WebRTC
                const configuration = {
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:stun1.l.google.com:19302' }
                    ]
                };

                peerConnection = new RTCPeerConnection(configuration);
                
                // Lấy stream từ microphone
                localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });

                // Xử lý ICE candidates
                peerConnection.onicecandidate = event => {
                    if (event.candidate) {
                        const candidateData = {
                            candidate: event.candidate.candidate,
                            sdpMid: event.candidate.sdpMid,
                            sdpMLineIndex: event.candidate.sdpMLineIndex
                        };
                        connection.invoke("HandleIceCandidate", targetUserId, JSON.stringify(candidateData))
                            .catch(error => {
                                console.error("Error sending ICE candidate:", error);
                            });
                    }
                };

                // Xử lý khi kết nối được thiết lập
                peerConnection.onconnectionstatechange = () => {
                    switch(peerConnection.connectionState) {
                        case "connected":
                            document.getElementById('callStatus').textContent = 'Đã kết nối';
                            document.getElementById('callStatus').className = 'text-success';
                            isCallActive = true;
                            break;
                        case "disconnected":
                        case "failed":
                            document.getElementById('callStatus').textContent = 'Mất kết nối';
                            document.getElementById('callStatus').className = 'text-danger';
                            endCall();
                            break;
                        case "closed":
                            document.getElementById('callStatus').textContent = 'Cuộc gọi kết thúc';
                            document.getElementById('callStatus').className = '';
                            endCall();
                            break;
                    }
                };

                if (!isIncoming) {
                    // Tạo và gửi offer
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);

                    const offerData = {
                        type: offer.type,
                        sdp: offer.sdp
                    };
                    await connection.invoke("HandleCallOffer", targetUserId, JSON.stringify(offerData));
                }

                // Bắt đầu đếm thời gian
                startCallTimer();
            } catch (error) {
                console.error('Error starting WebRTC connection:', error);
                showError('Không thể thiết lập kết nối');
                endCall();
            }
        }

        async function handleIncomingCall(offer, callerId) {
            try {
                if (isCallActive) {
                    console.log("Call already in progress");
                    return;
                }

                // Thiết lập offer từ người gọi
                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));

                // Tạo và gửi answer
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);

                const answerData = {
                    type: answer.type,
                    sdp: answer.sdp
                };
                await connection.invoke("HandleCallAnswer", callerId, JSON.stringify(answerData));

                // Cập nhật trạng thái
                document.getElementById('callStatus').textContent = 'Đã kết nối';
                document.getElementById('callStatus').className = 'text-success';
                isCallActive = true;
            } catch (error) {
                console.error('Error handling incoming call:', error);
                showError('Không thể xử lý cuộc gọi đến');
                endCall();
            }
        }

        function endCall() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            stopCallTimer();
            isCallActive = false;
            isIncomingCall = false;
            const callModal = bootstrap.Modal.getInstance(document.getElementById('callModal'));
            if (callModal) {
                callModal.hide();
            }
        }

        function toggleMute() {
            if (localStream) {
                isMuted = !isMuted;
                localStream.getAudioTracks().forEach(track => {
                    track.enabled = !isMuted;
                });
                const muteIcon = document.getElementById('muteIcon');
                muteIcon.className = isMuted ? 'fas fa-microphone-slash' : 'fas fa-microphone';
            }
        }

        function startCallTimer() {
            callStartTime = new Date();
            callTimer = setInterval(updateCallTimer, 1000);
        }

        function stopCallTimer() {
            if (callTimer) {
                clearInterval(callTimer);
                callTimer = null;
            }
        }

        function updateCallTimer() {
            const now = new Date();
            const diff = Math.floor((now - callStartTime) / 1000);
            const minutes = Math.floor(diff / 60).toString().padStart(2, '0');
            const seconds = (diff % 60).toString().padStart(2, '0');
            document.getElementById('callTimer').textContent = `${minutes}:${seconds}`;
        }

        // Xử lý khi đóng modal
        document.getElementById('callModal').addEventListener('hidden.bs.modal', function () {
            endCall();
        });
    </script>
} 
} 