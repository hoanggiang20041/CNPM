@model Chamsoc.Models.Caregiver
@{
    ViewData["Title"] = "Cập Nhật Hồ Sơ Người Chăm Sóc";
    string currentUserRole = ViewBag.CurrentUserRole;
}

<style>
    .verified-tick {
        display: inline-block;
        width: 20px;
        height: 20px;
        background: url('/images/tick.png') no-repeat center center;
        background-size: cover;
        margin-left: 5px;
        vertical-align: middle;
        position: relative;
    }

        .verified-tick::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            border: 2px solid transparent;
            border-radius: 50%;
            animation: rainbow-border 3s linear infinite;
            background: url('/images/tick.png') no-repeat center center;
            background-size: cover;
            z-index: -1;
        }

    @@keyframes rainbow-border {
        0% { border-color: #ff0000; } /* Red */
        16% { border-color: #ff7f00; } /* Orange */
        33% { border-color: #ffff00; } /* Yellow */
        50% { border-color: #00ff00; } /* Green */
        66% { border-color: #00ffff; } /* Cyan */
        83% { border-color: #0000ff; } /* Blue */
        100% { border-color: #ff00ff; } /* Magenta */
    }
</style>

<div class="container my-5">
    <h2 class="text-center mb-4">Cập Nhật Hồ Sơ Người Chăm Sóc</h2>
    <div class="row justify-content-center">
        <div class="col-md-6">
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger" role="alert">
                    @TempData["ErrorMessage"]
                </div>
            }
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success" role="alert">
                    @TempData["SuccessMessage"]
                </div>
            }
            <form asp-action="UpdateProfileCaregiver" asp-controller="Account" method="post" enctype="multipart/form-data" class="needs-validation" novalidate>
                <input type="hidden" name="id" value="@ViewBag.User.Id" />
                <div class="mb-3 text-center">
                    <h5>@Model.Name</h5>
                    <p>
                        <strong>Tình trạng:</strong>
                        @if (Model.IsVerified)
                        {
                            <span>Đã xác minh <span class="verified-tick"></span></span>
                        }
                        else
                        {
                            <span>Chưa xác minh</span>
                        }
                    </p>
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Họ và tên</label>
                    <input type="text" class="form-control" id="name" name="name" value="@Model.Name" required />
                    <div class="invalid-feedback">
                        Vui lòng nhập họ và tên.
                    </div>
                </div>
                <div class="mb-3">
                    <label for="skills" class="form-label">Kỹ năng chăm sóc</label>
                    <select class="form-control" id="skills" name="skills" required>
                        <option value="">Chọn kỹ năng</option>
                        @if (Model.Skills == "Khám toàn diện")
                        {
                            <option value="Khám toàn diện" selected>Khám toàn diện</option>
                            <option value="Khám vật lý trị liệu">Khám vật lý trị liệu</option>
                        }
                        else if (Model.Skills == "Khám vật lý trị liệu")
                        {
                            <option value="Khám toàn diện">Khám toàn diện</option>
                            <option value="Khám vật lý trị liệu" selected>Khám vật lý trị liệu</option>
                        }
                        else
                        {
                            <option value="Khám toàn diện">Khám toàn diện</option>
                            <option value="Khám vật lý trị liệu">Khám vật lý trị liệu</option>
                        }
                    </select>
                    <div class="invalid-feedback">
                        Vui lòng chọn kỹ năng chăm sóc.
                    </div>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" name="email" value="@ViewBag.User.Email" required />
                    <div class="invalid-feedback">
                        Vui lòng nhập email hợp lệ.
                    </div>
                </div>
                <div class="mb-3">
                    <label for="contact" class="form-label">Số điện thoại</label>
                    <input type="text" class="form-control" id="contact" name="contact" value="@ViewBag.User.PhoneNumber" required maxlength="10" pattern="\d{10}" />
                    <div class="invalid-feedback">
                        Vui lòng nhập số điện thoại gồm đúng 10 chữ số.
                    </div>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Thù lao bạn mong muốn (1 giờ) (VNĐ)</label>
                    <input type="text" class="form-control" id="price" name="priceDisplay" value="@Model.Price.ToString("N0")" required />
                    <input type="hidden" id="priceHidden" name="price" value="@Model.Price" />
                    <span class="text-danger" id="priceError"></span>
                </div>
                <div class="mb-3">
                    <label for="isAvailable" class="form-label">Trạng thái</label>
                    <select class="form-control" id="isAvailable" name="isAvailable">
                        @if (Model.IsAvailable)
                        {
                            <option value="true" selected>Sẵn sàng</option>
                            <option value="false">Đang bận</option>
                        }
                        else
                        {
                            <option value="true">Sẵn sàng</option>
                            <option value="false" selected>Đang bận</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="avatar" class="form-label">Ảnh đại diện</label>
                    <input type="file" class="form-control" id="avatar" name="avatar" accept="image/*" />
                    @if (!string.IsNullOrEmpty(Model.AvatarUrl))
                    {
                        <img src="@Model.AvatarUrl" alt="Avatar" class="mt-2" style="width: 100px; height: 100px; object-fit: cover;" />
                    }
                </div>
                <div class="mb-3">
                    <label for="currentPassword" class="form-label">Mật khẩu hiện tại (nếu muốn đổi mật khẩu)</label>
                    <input type="password" class="form-control" id="currentPassword" name="currentPassword" />
                </div>
                <div class="mb-3">
                    <label for="newPassword" class="form-label">Mật khẩu mới (nếu muốn đổi mật khẩu)</label>
                    <input type="password" class="form-control" id="newPassword" name="newPassword" />
                </div>
                <div class="text-center">
                    <button type="submit" class="btn btn-primary">Cập nhật</button>
                    @if (currentUserRole == "Admin")
                    {
                        <a asp-action="ManageUsers" asp-controller="Admin" class="btn btn-secondary">Quay lại</a>
                    }
                    else if (currentUserRole == "Senior")
                    {
                        <a asp-action="ListCaregivers" asp-controller="Caregivers" class="btn btn-secondary">Quay lại</a>
                    }
                    else if (currentUserRole == "Caregiver")
                    {
                        <a asp-action="ListSeniors" asp-controller="Seniors" class="btn btn-secondary">Quay lại</a>
                    }
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const priceInput = document.getElementById('price');
            const priceHidden = document.getElementById('priceHidden');
            const priceError = document.getElementById('priceError');
            const contactInput = document.getElementById('contact');
            const form = document.querySelector('form');

            // Định dạng số khi hiển thị (thêm dấu chấm phân cách hàng nghìn)
            function formatNumber(value) {
                return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
            }

            // Loại bỏ định dạng để lấy giá trị số thô
            function parseNumber(value) {
                return parseFloat(value.replace(/\./g, '')) || 0;
            }

            // Định dạng giá trị ban đầu cho price
            priceInput.value = formatNumber(parseFloat(priceInput.value.replace(/\./g, '')));

            // Xử lý khi người dùng nhập price
            priceInput.addEventListener('input', function () {
                let rawValue = parseNumber(this.value);
                if (isNaN(rawValue) || rawValue < 0) {
                    priceError.textContent = 'Giá phải là số không âm.';
                    priceHidden.value = '';
                } else {
                    priceError.textContent = '';
                    this.value = formatNumber(rawValue);
                    priceHidden.value = rawValue;
                }
            });

            priceInput.addEventListener('change', function () {
                let rawValue = parseNumber(this.value);
                this.value = formatNumber(rawValue);
                priceHidden.value = rawValue;
            });

            // Kiểm tra real-time khi nhập số điện thoại
            contactInput.addEventListener('input', function (e) {
                let value = e.target.value.replace(/[^0-9]/g, ''); // Chỉ giữ lại số
                e.target.value = value; // Cập nhật giá trị ngay lập tức
                if (value.length > 10) {
                    e.target.value = value.slice(0, 10); // Cắt bớt nếu vượt quá 10 số
                }
                if (value.length !== 10) {
                    e.target.classList.add('is-invalid');
                } else {
                    e.target.classList.remove('is-invalid');
                }
            });

            // Validation khi submit form
            form.addEventListener('submit', function (e) {
                let name = document.getElementById('name').value;
                let skills = document.getElementById('skills').value;
                let email = document.getElementById('email').value;
                let contact = document.getElementById('contact').value;
                let price = document.getElementById('priceHidden').value;
                let errors = [];

                // Reset validation state
                form.querySelectorAll('.is-invalid').forEach(element => element.classList.remove('is-invalid'));

                // Debug giá trị của các trường
                console.log("Name:", name);
                console.log("Skills:", skills);
                console.log("Email:", email);
                console.log("Contact:", contact);
                console.log("Price:", price);

                // Kiểm tra số điện thoại phải là 10 chữ số
                const phoneRegex = /^\d{10}$/;
                if (!contact || !phoneRegex.test(contact)) {
                    errors.push(`Số điện thoại phải gồm đúng 10 chữ số. Giá trị hiện tại: "${contact}"`);
                    document.getElementById('contact').classList.add('is-invalid');
                }

   
                if (!name || name.trim() === '') {
                    errors.push(`Họ và tên không hợp lệ. Giá trị hiện tại: "${name}"`);
                    document.getElementById('name').classList.add('is-invalid');
                }

                if (!skills) {
                    errors.push(`Kỹ năng chăm sóc không hợp lệ. Giá trị hiện tại: "${skills}"`);
                    document.getElementById('skills').classList.add('is-invalid');
                }

                if (!price || parseInt(price) <= 0) {
                    errors.push(`Giá mong muốn phải lớn hơn 0. Giá trị hiện tại: "${price}"`);
                    document.getElementById('price').classList.add('is-invalid');
                }

                if (errors.length > 0) {
                    e.preventDefault();
                    console.log("Validation Errors:", errors);
                    alert("Có lỗi xảy ra:\n" + errors.join("\n"));
                }
            });
        });
    </script>
}