@model List<Chamsoc.Models.CaregiverViewModel>
@using System.Globalization

@{
    ViewData["Title"] = "Danh sách người chăm sóc";
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "anonymous";
    var currentUserName = User.Identity.Name ?? "Người dùng không xác định";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<div class="container-fluid py-4">
    <!-- Best Sellers Section -->
    <div class="best-sellers-section mb-5">
        <div class="section-header text-center mb-4">
            <h3 class="text-primary">
                <i class="fas fa-crown text-warning me-2"></i>Top Người Chăm Sóc Nổi Bật
            </h3>
            <p class="text-muted">Những người chăm sóc được đánh giá cao nhất từ cộng đồng</p>
        </div>
        
        <div id="bestSellersCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                @{
                    var bestSellers = Model
                        .OrderByDescending(c => c.RatingCount)
                        .Take(3)
                        .ToList();
                    
                    for (int i = 0; i < bestSellers.Count; i++)
                    {
                        var caregiver = bestSellers[i];
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            <div class="row justify-content-center">
                                <div class="col-lg-8">
                                    <div class="best-seller-card">
                                        <div class="row g-0">
                                            <div class="col-md-4">
                                                <div class="image-container">
                                                    <img src="@(string.IsNullOrEmpty(caregiver.AvatarUrl) ? "/images/default-avatar.png" : caregiver.AvatarUrl)" 
                                                         class="img-fluid" alt="@caregiver.Name">
                                                    <div class="rank-badge">
                                                        <i class="fas fa-medal"></i>
                                                        <span>#@(i + 1)</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-8">
                                                <div class="content-container">
                                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                                        <div>
                                                            <h4 class="mb-1">@caregiver.Name</h4>
                                                            <div class="rating-stars mb-2">
                                                                @for (int j = 1; j <= 5; j++)
                                                                {
                                                                    if (j <= caregiver.AverageRating)
                                                                    {
                                                                        <i class="fas fa-star"></i>
                                                                    }
                                                                    else if (j - 0.5 <= caregiver.AverageRating)
                                                                    {
                                                                        <i class="fas fa-star-half-alt"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="far fa-star"></i>
                                                                    }
                                                                }
                                                                <span class="rating-count">(@caregiver.RatingCount đánh giá)</span>
                                                            </div>
                                                        </div>
                                                        <div class="price-tag">
                                                            @caregiver.Price.ToString("N0") VNĐ/ngày
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="skills-container mb-3">
                                                        <h6 class="text-primary mb-2">Chuyên môn:</h6>
                                                        @foreach (var skill in caregiver.Skills.Split(','))
                                                        {
                                                            <span class="skill-badge">@skill.Trim()</span>
                                                        }
                                                    </div>
                                                    
                                                    <div class="stats-container mb-3">
                                                        <div class="stat-item">
                                                            <i class="fas fa-user-check"></i>
                                                            <span>@caregiver.RatingCount khách hàng</span>
                                                        </div>
                                                        <div class="stat-item">
                                                            <i class="fas fa-clock"></i>
                                                            <span>@(caregiver.IsAvailable ? "Sẵn sàng" : "Đang bận")</span>
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="d-flex gap-2">
    <a href="@Url.Action("ViewUserProfile", "Account", new { id = caregiver.UserId })" 
   class="btn btn-outline-primary btn-sm d-inline-flex align-items-center gap-2"> 
    <i class="bi bi-person-badge"></i>Xem hồ sơ 
</a> 
@if (User.Identity.IsAuthenticated && User.IsInRole("Senior")) 
{ 
    <a href="@Url.Action("BookCaregiver", "CareJobs", new { id = caregiver.Id })" 
       class="btn btn-primary btn-sm d-inline-flex align-items-center gap-2 @(!caregiver.IsAvailable ? "disabled" : "")" 
       disabled="@(!caregiver.IsAvailable)"> 
        <i class="bi bi-calendar-plus"></i>Đặt lịch 
    </a>
    <a href="@Url.Action("SendContactRequest", "Notifications", new { caregiverId = caregiver.Id })" 
       class="btn btn-info btn-sm d-inline-flex align-items-center gap-2">
        <i class="bi bi-bell"></i>Liên hệ
    </a>
}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            
            <button class="carousel-control-prev" type="button" data-bs-target="#bestSellersCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#bestSellersCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-10">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-primary text-white py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-users me-2"></i>Danh sách người chăm sóc
                        </h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-light" type="button" data-bs-toggle="collapse" data-bs-target="#searchCollapse">
                                <i class="fas fa-search me-2"></i>Tìm kiếm
                            </button>
                        </div>
                    </div>
                </div>

                <div class="collapse" id="searchCollapse">
                    <div class="card-body border-bottom">
                        <form method="get" class="row g-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="form-label">Tên người chăm sóc</label>
                                    <input type="text" name="searchName" class="form-control" value="@ViewBag.SearchName" placeholder="Nhập tên..." />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="form-label">Kỹ năng</label>
                                    <input type="text" name="searchSkills" class="form-control" value="@ViewBag.SearchSkills" placeholder="Nhập kỹ năng..." />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="form-label">Đánh giá tối thiểu</label>
                                    <select name="minRating" class="form-select">
                                        <option value="">Tất cả</option>
                                        <option value="4" selected="@(ViewBag.MinRating == 4 ? "selected" : null)">4+ sao</option>
                                        <option value="3" selected="@(ViewBag.MinRating == 3 ? "selected" : null)">3+ sao</option>
                                        <option value="2" selected="@(ViewBag.MinRating == 2 ? "selected" : null)">2+ sao</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-search me-2"></i>Tìm kiếm
                                </button>
                                <a href="@Url.Action("ListCaregivers")" class="btn btn-secondary">
                                    <i class="fas fa-redo me-2"></i>Đặt lại
                                </a>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="card-body">
                    <div class="row g-4">
                        @foreach (var caregiver in Model)
                        {
                            <div class="col-md-6 col-lg-4">
                                <div class="card h-100 shadow-sm">
                                    @if (caregiver.IsVerified)
                                    {
                                        <div class="verified-badge">
                                            <i class="fas fa-check-circle me-1"></i>Đã xác minh
                                        </div>
                                    }
                                    <div class="status-badge @(caregiver.IsAvailable ? "bg-success" : "bg-warning")">
                                        @(caregiver.IsAvailable ? "Sẵn sàng" : "Đang bận")
                                    </div>
                                    <img src="@(string.IsNullOrEmpty(caregiver.AvatarUrl) ? "/images/default-avatar.png" : caregiver.AvatarUrl)" 
                                         class="card-img-top" alt="@caregiver.Name" style="height: 200px;">
                                    <div class="card-body">
                                        <h5 class="card-title mb-2">@caregiver.Name</h5>
                                        <div class="mb-2">
                                            <div class="rating-stars">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    if (i <= caregiver.AverageRating)
                                                    {
                                                        <i class="fas fa-star"></i>
                                                    }
                                                    else if (i - 0.5 <= caregiver.AverageRating)
                                                    {
                                                        <i class="fas fa-star-half-alt"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="far fa-star"></i>
                                                    }
                                                }
                                                <span class="rating-count">(@caregiver.RatingCount)</span>
                                            </div>
                                        </div>
                                        <div class="mb-2">
                                            <h6 class="text-primary mb-1">Kỹ năng:</h6>
                                            <div class="skills-container">
                                                @foreach (var skill in caregiver.Skills.Split(',').Take(3))
                                                {
                                                    <span class="skills-badge">@skill.Trim()</span>
                                                }
                                                @if (caregiver.Skills.Split(',').Length > 3)
                                                {
                                                    <span class="skills-badge">+@(caregiver.Skills.Split(',').Length - 3)</span>
                                                }
                                            </div>
                                        </div>
                                        <div class="price-tag mb-2">
                                            <i class="fas fa-tag me-2"></i>@caregiver.Price.ToString("N0") VNĐ/giờ
                                        </div>
                                        <div class="d-flex gap-2">
                                            <a href="@Url.Action("ViewUserProfile", "Account", new { id = caregiver.UserId })" 
                                               class="btn btn-outline-primary btn-sm flex-grow-1 d-inline-flex align-items-center gap-2">
                                                <i class="bi bi-person-badge"></i>Hồ sơ
                                            </a>
                                            @if (User.Identity.IsAuthenticated && User.IsInRole("Senior"))
                                            {
                                                <a href="@Url.Action("BookCaregiver", "CareJobs", new { id = caregiver.Id })" 
                                                   class="btn btn-primary btn-sm flex-grow-1 d-inline-flex align-items-center gap-2 @(!caregiver.IsAvailable ? "disabled" : "")"
                                                   disabled="@(!caregiver.IsAvailable)">
                                                    <i class="bi bi-calendar-plus"></i>Đặt lịch
                                                </a>
                                                <a href="@Url.Action("SendContactRequest", "Notifications", new { caregiverId = caregiver.Id })" 
                                                   class="btn btn-info btn-sm flex-grow-1 d-inline-flex align-items-center gap-2">
                                                    <i class="bi bi-bell"></i>Liên hệ
                                                </a>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Call Components -->
<div id="callOverlay" class="call-overlay"></div>

<div class="call-popup" id="callPopup">
    <div class="popup-content">
        <img id="callAvatar" class="avatar" src="" alt="Avatar">
        <h4 id="callName" class="mt-3">Đang gọi...</h4>
        <p id="callStatus" class="call-status">Đang kết nối...</p>
        <div id="callTimer" class="call-timer">00:00</div>
        
        <!-- Nút cho cuộc gọi đến -->
        <div class="popup-buttons" id="incomingCallButtons">
            <button class="btn btn-success btn-lg rounded-circle d-inline-flex align-items-center justify-content-center" id="answerCallBtn" title="Trả lời cuộc gọi" style="width: 60px; height: 60px;">
                <i class="bi bi-telephone-inbound-fill fs-4"></i>
            </button>
            <button class="btn btn-danger btn-lg rounded-circle d-inline-flex align-items-center justify-content-center" id="rejectCallBtn" title="Từ chối cuộc gọi" style="width: 60px; height: 60px;">
                <i class="bi bi-telephone-x-fill fs-4"></i>
            </button>
        </div>

        <!-- Nút cho cuộc gọi đi -->
        <div class="popup-buttons" id="outgoingCallButtons" style="display: none;">
            <button class="btn btn-danger btn-lg rounded-circle d-inline-flex align-items-center justify-content-center" id="endOutgoingCallBtn" title="Kết thúc cuộc gọi" style="width: 60px; height: 60px;">
                <i class="bi bi-telephone-x-fill fs-4"></i>
            </button>
        </div>

        <!-- Nút cho cuộc gọi đang diễn ra -->
        <div class="popup-buttons" id="activeCallButtons" style="display: none;">
            <button class="btn btn-secondary btn-lg rounded-circle d-inline-flex align-items-center justify-content-center" id="toggleMicBtn" title="Tắt/Bật micro" style="width: 60px; height: 60px;">
                <i class="bi bi-mic-fill fs-4"></i>
            </button>
            <button class="btn btn-info btn-lg rounded-circle d-inline-flex align-items-center justify-content-center" id="toggleSpeakerBtn" title="Tắt/Bật loa" style="width: 60px; height: 60px;">
                <i class="bi bi-volume-up-fill fs-4"></i>
            </button>
            <button class="btn btn-danger btn-lg rounded-circle d-inline-flex align-items-center justify-content-center" id="endActiveCallBtn" title="Kết thúc cuộc gọi" style="width: 60px; height: 60px;">
                <i class="bi bi-telephone-x-fill fs-4"></i>
            </button>
        </div>
    </div>
</div>

<!-- Audio elements -->
<audio id="remoteAudio" autoplay></audio>
<audio id="ringingAudio" loop>
    <source src="/audio/ringing.mp3" type="audio/mpeg">
    <source src="https://www.soundjay.com/phone/telephone-ring-01.mp3" type="audio/mpeg">
</audio>
<audio id="endCallAudio">
    <source src="/audio/endcall.mp3" type="audio/mpeg">
    <source src="https://www.soundjay.com/phone/telephone-end-01.mp3" type="audio/mpeg">
</audio>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    window.addEventListener('DOMContentLoaded', () => {
        console.log("Script đã tải và DOM sẵn sàng.");
        
        // Các hàm tiện ích
        function showError(message) {
            console.error(message);
            alert(message);
        }

        function playAudio(elementId) {
            const audio = document.getElementById(elementId);
            if (audio) {
                audio.currentTime = 0;
                audio.play().catch(err => console.error("Lỗi phát audio:", err));
            }
        }

        function stopAudio(elementId) {
            const audio = document.getElementById(elementId);
            if (audio) {
                audio.pause();
                audio.currentTime = 0;
            }
        }

        function updateMicButtonState() {
            const micBtn = document.getElementById('toggleMicBtn');
            if (micBtn) {
                micBtn.innerHTML = isMicOn ? 
                    '<i class="bi bi-mic-fill"></i>' : 
                    '<i class="bi bi-mic-mute-fill"></i>';
            }
        }

        function updateSpeakerButtonState() {
            const speakerBtn = document.getElementById('toggleSpeakerBtn');
            if (speakerBtn) {
                speakerBtn.innerHTML = isSpeakerOn ? 
                    '<i class="bi bi-volume-up-fill"></i>' : 
                    '<i class="bi bi-volume-mute-fill"></i>';
            }
        }

        function endCall() {
            if (callState === 'idle') return;
            
            try {
                if (connection && targetUserId) {
                    connection.invoke("EndCall", targetUserId)
                        .catch(err => console.error("Lỗi khi kết thúc cuộc gọi:", err));
                }
                cleanupCall();
            } catch (err) {
                console.error("Lỗi khi kết thúc cuộc gọi:", err);
                cleanupCall();
            }
        }

        function cleanupCall() {
            console.log("Dọn dẹp cuộc gọi");
            
            // Dừng timer
            if (callTimerInterval) {
                clearInterval(callTimerInterval);
                callTimerInterval = null;
            }
            callStartTime = null;

            // Dừng streams
            if (localStream) {
                localStream.getTracks().forEach(track => {
                    track.stop();
                    track.enabled = false;
                });
                localStream = null;
            }

            if (remoteStream) {
                remoteStream.getTracks().forEach(track => {
                    track.stop();
                    track.enabled = false;
                });
                remoteStream = null;
            }

            // Đóng kết nối
            if (peerConnection) {
                try {
                    peerConnection.close();
                } catch (err) {
                    console.error("Lỗi khi đóng peerConnection:", err);
                }
                peerConnection = null;
            }

            // Dừng âm thanh
            stopAudio('ringingAudio');
            stopAudio('endCallAudio');

            // Ẩn popups
            const callPopup = document.getElementById('callPopup');
            const callOverlay = document.getElementById('callOverlay');
            if (callPopup) callPopup.style.display = 'none';
            if (callOverlay) callOverlay.style.display = 'none';

            // Reset timer
            const timerElement = document.getElementById('callTimer');
            if (timerElement) timerElement.textContent = '00:00';

            // Reset trạng thái
            isMicOn = false;
            isSpeakerOn = true;
            callState = 'idle';
            targetUserId = null;
            targetUserName = null;
            targetAvatar = null;
            remoteOffer = null;
            pendingIceCandidates = [];

            // Cập nhật UI
            updateMicButtonState();
            updateSpeakerButtonState();
        }

        // Khởi tạo các biến và cấu hình
        const currentUserId = '@currentUserId';
        const currentUserName = '@currentUserName';
        let peerConnection = null;
        let localStream = null;
        let remoteStream = null;
        let isMicOn = false;
        let isSpeakerOn = true;
        let targetUserId = null;
        let targetUserName = null;
        let targetAvatar = null;
        let callTimerInterval = null;
        let callState = 'idle';
        let remoteOffer = null;
        let pendingIceCandidates = [];
        let callStartTime = null;

        const config = {
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                { urls: "stun:stun1.l.google.com:19302" },
                { urls: "stun:stun2.l.google.com:19302" },
                { urls: "stun:stun3.l.google.com:19302" },
                {
                    urls: ["turn:openrelay.metered.ca:80", "turn:openrelay.metered.ca:443"],
                    username: "openrelayproject",
                    credential: "openrelayproject"
                }
            ],
            iceCandidatePoolSize: 10
        };

        const audioConstraints = {
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true
            },
            video: false
        };

        // Khởi tạo các phần tử UI
        const UI = {
            elements: {},
            
            init() {
                console.log("Khởi tạo các phần tử UI...");
                const requiredElements = [
                    'callPopup',
                    'callOverlay',
                    'incomingCallButtons',
                    'outgoingCallButtons',
                    'activeCallButtons',
                    'callTimer',
                    'callStatus',
                    'callAvatar',
                    'callName',
                    'answerCallBtn',
                    'rejectCallBtn',
                    'toggleMicBtn',
                    'toggleSpeakerBtn',
                    'endActiveCallBtn',
                    'endOutgoingCallBtn',
                    'remoteAudio',
                    'ringingAudio',
                    'endCallAudio'
                ];

                const missingElements = [];
                requiredElements.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        this.elements[id] = element;
                    } else {
                        missingElements.push(id);
                        console.error(`Không tìm thấy phần tử: ${id}`);
                    }
                });

                if (missingElements.length > 0) {
                    console.error('Các phần tử còn thiếu:', missingElements);
                    return false;
                }

                this.setupEventListeners();
                return true;
            },

            setupEventListeners() {
                console.log("Thiết lập các sự kiện...");
                
                // Kiểm tra và thiết lập sự kiện cho nút trả lời
                if (this.elements.answerCallBtn) {
                    this.elements.answerCallBtn.onclick = answerCall;
                }

                // Kiểm tra và thiết lập sự kiện cho nút từ chối
                if (this.elements.rejectCallBtn) {
                    this.elements.rejectCallBtn.onclick = () => {
                        if (callState !== 'waiting') return;
                        callState = 'ended';
                        connection.invoke("RejectCall", targetUserId)
                            .catch(err => console.error("Lỗi khi từ chối cuộc gọi:", err));
                        this.elements.callPopup.style.display = 'none';
                        stopAudio('ringingAudio');
                        playAudio('endCallAudio');
                        cleanupCall();
                    };
                }

                // Kiểm tra và thiết lập sự kiện cho nút micro
                if (this.elements.toggleMicBtn) {
                    this.elements.toggleMicBtn.onclick = () => {
                        if (localStream) {
                            isMicOn = !isMicOn;
                            localStream.getAudioTracks().forEach(track => {
                                track.enabled = isMicOn;
                            });
                            updateMicButtonState();
                        }
                    };
                }

                // Kiểm tra và thiết lập sự kiện cho nút loa
                if (this.elements.toggleSpeakerBtn) {
                    this.elements.toggleSpeakerBtn.onclick = () => {
                        isSpeakerOn = !isSpeakerOn;
                        if (this.elements.remoteAudio) {
                            this.elements.remoteAudio.muted = !isSpeakerOn;
                        }
                        updateSpeakerButtonState();
                    };
                }

                // Kiểm tra và thiết lập sự kiện cho nút kết thúc cuộc gọi
                if (this.elements.endActiveCallBtn) {
                    this.elements.endActiveCallBtn.onclick = endCall;
                }

                if (this.elements.endOutgoingCallBtn) {
                    this.elements.endOutgoingCallBtn.onclick = endCall;
                }
            },

            showIncomingCall(userName) {
                try {
                    if (!this.elements.callPopup || !this.elements.callOverlay || 
                        !this.elements.incomingCallButtons || !this.elements.activeCallButtons || 
                        !this.elements.callTimer || !this.elements.callStatus || 
                        !this.elements.callAvatar || !this.elements.callName ||
                        !this.elements.outgoingCallButtons) {
                        throw new Error("Required elements not found");
                    }

                    // Sử dụng ui-avatars.com API
                    this.elements.callAvatar.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&background=random&size=120`;
                    this.elements.callName.textContent = userName || 'Không xác định';
                    this.elements.callStatus.textContent = 'Cuộc gọi đến...';

                    // Ẩn tất cả các nhóm nút trước
                    this.elements.outgoingCallButtons.style.display = 'none';
                    this.elements.activeCallButtons.style.display = 'none';
                    this.elements.incomingCallButtons.style.display = 'flex';
                    
                    this.elements.callTimer.style.display = 'none';
                    
                    this.elements.callPopup.style.display = 'block';
                    this.elements.callOverlay.style.display = 'block';

                    // Phát âm thanh chuông
                    playAudio('ringingAudio');
                } catch (error) {
                    console.error("Error showing incoming call:", error);
                    showError("Không thể hiển thị cuộc gọi đến");
                }
            }
        };

        function showActiveCall() {
            try {
                const elements = UI.elements;
                if (!elements.callPopup || !elements.callOverlay || 
                    !elements.outgoingCallButtons || !elements.activeCallButtons || 
                    !elements.callTimer || !elements.callStatus || 
                    !elements.callAvatar || !elements.callName ||
                    !elements.incomingCallButtons) {
                    throw new Error("Required elements not found");
                }

                // Sử dụng ui-avatars.com API
                elements.callAvatar.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(targetUserName)}&background=random&size=120`;
                elements.callName.textContent = targetUserName || 'Không xác định';

                // Ẩn tất cả các nhóm nút
                elements.incomingCallButtons.style.display = 'none';
                elements.outgoingCallButtons.style.display = 'none';
                elements.activeCallButtons.style.display = 'flex';
                
                elements.callTimer.style.display = 'block';
                elements.callStatus.textContent = 'Cuộc gọi đang diễn ra';
                
                elements.callPopup.style.display = 'block';
                elements.callOverlay.style.display = 'block';
            } catch (error) {
                console.error("Error showing active call:", error);
                showError("Không thể hiển thị cuộc gọi");
            }
        }

        // Khởi tạo kết nối SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl(`/callHub?userId=${currentUserId}`)
            .withAutomaticReconnect()
            .build();

        async function startConnection() {
            try {
                if (connection.state === signalR.HubConnectionState.Disconnected) {
                    await connection.start();
                    console.log("Đã kết nối tới callHub");
                    setupSignalRHandlers();
                }
            } catch (err) {
                console.error("Lỗi kết nối SignalR:", err);
                setTimeout(startConnection, 5000);
            }
        }

        function setupSignalRHandlers() {
            // Xử lý nhận cuộc gọi
            connection.on("ReceiveCall", async (callerId, callerName, callerAvatar, offer) => {
                console.log("Nhận cuộc gọi từ:", callerName);
                if (callState !== 'idle') {
                    await connection.invoke("RejectCall", callerId);
                    return;
                }

                try {
                    callState = 'waiting';
                    targetUserId = callerId;
                    targetUserName = callerName;
                    targetAvatar = callerAvatar;
                    remoteOffer = offer;

                    if (!peerConnection) {
                        console.log("Khởi tạo peerConnection mới");
                        peerConnection = new RTCPeerConnection(config);
                        setupPeerConnection(callerId);
                    }

                    UI.showIncomingCall(callerName);
                    playAudio('ringingAudio');

                } catch (err) {
                    console.error("Lỗi khi xử lý cuộc gọi đến:", err);
                    cleanupCall();
                }
            });

            // Xử lý ICE candidate
            connection.on("ReceiveIceCandidate", async (candidate) => {
                console.log("Nhận ICE candidate");
                try {
                    if (peerConnection && peerConnection.remoteDescription) {
                        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                    } else {
                        console.log("Lưu ICE candidate để xử lý sau");
                        pendingIceCandidates.push(candidate);
                    }
                } catch (err) {
                    console.error("Lỗi khi thêm ICE candidate:", err);
                }
            });

            // Xử lý từ chối cuộc gọi
            connection.on("CallRejected", () => {
                console.log("Cuộc gọi bị từ chối");
                stopAudio('ringingAudio');
                playAudio('endCallAudio');
                cleanupCall();
                alert("Cuộc gọi đã bị từ chối");
            });

            // Xử lý kết thúc cuộc gọi
            connection.on("CallEnded", () => {
                console.log("Cuộc gọi kết thúc");
                playAudio('endCallAudio');
                cleanupCall();
                alert("Cuộc gọi đã kết thúc");
            });

            // Xử lý mất kết nối
            connection.onclose(() => {
                if (callState !== 'idle') {
                    cleanupCall();
                    alert("Mất kết nối. Cuộc gọi đã kết thúc.");
                }
                setTimeout(startConnection, 5000);
            });
        }

        function setupPeerConnection(targetUserId) {
            peerConnection.onicecandidate = event => {
                if (event.candidate) {
                    console.log("Gửi ICE candidate");
                    connection.invoke("SendIceCandidate", targetUserId, event.candidate)
                        .catch(err => console.error("Lỗi khi gửi ICE candidate:", err));
                }
            };

            peerConnection.ontrack = event => {
                console.log("Nhận track âm thanh");
                remoteStream = event.streams[0];
                const remoteAudio = document.getElementById("remoteAudio");
                if (remoteAudio) {
                    remoteAudio.srcObject = remoteStream;
                    remoteAudio.muted = !isSpeakerOn;
                }
            };

            peerConnection.oniceconnectionstatechange = () => {
                console.log("Trạng thái ICE:", peerConnection.iceConnectionState);
                if (peerConnection.iceConnectionState === "failed" || 
                    peerConnection.iceConnectionState === "disconnected") {
                    console.log("Kết nối ICE thất bại hoặc bị ngắt");
                    cleanupCall();
                }
            };

            peerConnection.onconnectionstatechange = () => {
                console.log("Trạng thái kết nối:", peerConnection.connectionState);
                if (peerConnection.connectionState === "failed") {
                    console.log("Kết nối thất bại");
                    cleanupCall();
                }
            };
        }

        // Khởi tạo UI và kết nối
        try {
            if (UI.init()) {
                console.log("UI đã được khởi tạo thành công");
                startConnection();
            } else {
                console.error("Không thể khởi tạo UI");
            }
        } catch (error) {
            console.error("Lỗi khi khởi tạo:", error);
            showError("Không thể khởi tạo ứng dụng: " + error.message);
        }

        function startCallTimer() {
            if (callTimerInterval) {
                clearInterval(callTimerInterval);
            }

            const timerElement = UI.elements.callTimer;
            if (!timerElement) return;

            callStartTime = Date.now();
            timerElement.textContent = '00:00';

            callTimerInterval = setInterval(() => {
                if (!callStartTime) return;

                const elapsedTime = Math.floor((Date.now() - callStartTime) / 1000);
                const minutes = Math.floor(elapsedTime / 60);
                const seconds = elapsedTime % 60;
                timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);
        }

        async function answerCall() {
            console.log("Bắt đầu trả lời cuộc gọi");
            if (callState !== 'waiting' || !peerConnection || !remoteOffer) {
                console.log("Không thể trả lời: callState =", callState, "peerConnection =", peerConnection, "remoteOffer =", remoteOffer);
                return;
            }

            try {
                // Khởi tạo localStream
                console.log("Khởi tạo localStream");
                localStream = await navigator.mediaDevices.getUserMedia(audioConstraints);
                
                // Thêm tracks vào peerConnection
                localStream.getAudioTracks().forEach(track => {
                    console.log("Thêm audio track vào peerConnection");
                    peerConnection.addTrack(track, localStream);
                });

                // Thiết lập remote description từ offer đã lưu
                console.log("Thiết lập remote description");
                await peerConnection.setRemoteDescription(new RTCSessionDescription(remoteOffer));

                // Xử lý các ICE candidates đã lưu
                console.log("Xử lý các ICE candidates đã lưu:", pendingIceCandidates.length);
                for (const candidate of pendingIceCandidates) {
                    await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                }
                pendingIceCandidates = [];

                // Tạo và thiết lập local description
                console.log("Tạo answer");
                const answer = await peerConnection.createAnswer();
                console.log("Thiết lập local description");
                await peerConnection.setLocalDescription(answer);

                // Gửi answer đến người gọi
                console.log("Gửi answer đến người gọi");
                await connection.invoke("AnswerCall", targetUserId, answer);

                // Cập nhật UI và trạng thái
                callState = 'active';
                stopAudio('ringingAudio');
                showActiveCall();
                startCallTimer();

                // Bật micro
                console.log("Bật micro");
                localStream.getAudioTracks().forEach(track => {
                    track.enabled = true;
                    isMicOn = true;
                    updateMicButtonState();
                });

            } catch (err) {
                console.error("Lỗi khi trả lời cuộc gọi:", err);
                alert("Có lỗi xảy ra khi kết nối cuộc gọi. Vui lòng thử lại.");
                cleanupCall();
            }
        }
    });

    function showCallPopup(userId, userName, isOutgoing) {
        const popup = document.getElementById('callPopup');
        const avatar = document.getElementById('callAvatar');
        const name = document.getElementById('caregiverName');
        const title = document.getElementById('popupTitle');
        const answerBtn = document.getElementById('answerCallBtn');
        const rejectBtn = document.getElementById('rejectCallBtn');

        // Sử dụng avatar từ tham số thay vì biến toàn cục
        avatar.src = 'https://via.placeholder.com/120';  // Default avatar
        name.textContent = userName || "Người dùng không xác định";
        title.textContent = isOutgoing ? "Đang gọi..." : "Cuộc gọi đến";
        popup.style.display = 'block';

        if (isOutgoing) {
            answerBtn.style.display = 'none';
            rejectBtn.textContent = 'Hủy';
        } else {
            answerBtn.style.display = 'inline-block';
            rejectBtn.textContent = 'Từ chối';
        }

        rejectBtn.onclick = () => {
            if (callState !== 'waiting') return;
            callState = 'ended';
            connection.invoke(isOutgoing ? "EndCall" : "RejectCall", userId);
            popup.style.display = 'none';
            stopAudio('ringingAudio');
            playAudio('endCallAudio');
            cleanupCall();
        };

        document.getElementById('closePopupBtn').onclick = () => {
            if (callState !== 'waiting') return;
            callState = 'ended';
            popup.style.display = 'none';
            if (isOutgoing) connection.invoke("EndCall", userId);
            else connection.invoke("RejectCall", userId);
            stopAudio('ringingAudio');
            playAudio('endCallAudio');
            cleanupCall();
        };
    }

    function playAudio(elementId) {
        const audio = document.getElementById(elementId);
        if (audio) {
            audio.currentTime = 0;
            audio.play().catch(err => console.error("Lỗi phát audio:", err));
        }
    }

    function stopAudio(elementId) {
        const audio = document.getElementById(elementId);
        if (audio) {
            audio.pause();
            audio.currentTime = 0;
        }
    }
</script>

<!-- Request Contact Modal -->
<div class="modal fade" id="requestContactModal" tabindex="-1" aria-labelledby="requestContactModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="requestContactModalLabel">Yêu cầu liên hệ</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="requestContactForm">
                    <input type="hidden" id="caregiverId" name="caregiverId" />
                    <div class="mb-3">
                        <label for="message" class="form-label">Lời nhắn</label>
                        <textarea class="form-control" id="message" name="message" rows="3" 
                                placeholder="Nhập lời nhắn của bạn..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary d-inline-flex align-items-center gap-2" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i>Đóng
                </button>
                <button type="button" class="btn btn-primary d-inline-flex align-items-center gap-2" id="sendRequestBtn">
                    <i class="bi bi-send"></i>Gửi yêu cầu
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Card styles */
    .card {
        border: none;
        border-radius: 1rem;
        overflow: hidden;
        transition: all 0.3s ease;
        background: #fff;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.08);
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.12);
    }

    .card-img-top {
        width: 100%;
        height: 250px;
        object-fit: cover;
        object-position: center;
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
    }

    .card-body {
        padding: 1.5rem;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.75rem;
    }

    /* Rating stars */
    .rating-stars {
        color: #ffc107;
        font-size: 1rem;
    }

    .rating-count {
        color: #6c757d;
        font-size: 0.875rem;
        margin-left: 0.5rem;
    }

    /* Skills badges */
    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .skills-badge {
        background: #e9ecef;
        color: #495057;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.875rem;
        transition: all 0.3s ease;
    }

    .skills-badge:hover {
        background: #0d6efd;
        color: white;
    }

    /* Price tag */
    .price-tag {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-weight: 600;
        font-size: 1rem;
        box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);
    }

    /* Buttons */
    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 2rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        background: #0d6efd;
        border: none;
    }

    .btn-success {
        background: #28a745;
        border: none;
    }

    .btn-info {
        background: #17a2b8;
        border: none;
        color: white;
    }

    /* Best seller card styles */
    .best-seller-card {
        background: white;
        border-radius: 1rem;
        overflow: hidden;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .best-seller-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
    }

    .image-container {
        position: relative;
        height: 100%;
        min-height: 300px;
    }

    .image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .rank-badge {
        position: absolute;
        top: 1rem;
        left: 1rem;
        background: linear-gradient(45deg, #ffd700, #ffa500);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-weight: bold;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .content-container {
        padding: 2rem;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .stats-container {
        display: flex;
        gap: 2rem;
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6c757d;
    }

    .stat-item i {
        color: #0d6efd;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        margin-top: auto;
    }

    .action-buttons .btn {
        flex: 1;
    }

    /* Status badges */
    .verified-badge, .status-badge {
        position: absolute;
        top: 1rem;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-weight: 500;
        font-size: 0.875rem;
        z-index: 1;
    }

    .verified-badge {
        left: 1rem;
        background: linear-gradient(45deg, #17a2b8, #20c997);
        color: white;
    }

    .status-badge {
        right: 1rem;
        color: white;
    }

    .status-badge.bg-success {
        background: linear-gradient(45deg, #28a745, #20c997);
    }

    .status-badge.bg-warning {
        background: linear-gradient(45deg, #ffc107, #ff9800);
    }

    /* Carousel styles */
    .carousel {
        padding: 0 40px;
    }

    .carousel-control-prev,
    .carousel-control-next {
        width: 40px;
        height: 40px;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        top: 50%;
        transform: translateY(-50%);
        opacity: 0;
        transition: all 0.3s ease;
    }

    .carousel:hover .carousel-control-prev,
    .carousel:hover .carousel-control-next {
        opacity: 1;
    }

    .carousel-control-prev {
        left: 0;
    }

    .carousel-control-next {
        right: 0;
    }

    .carousel-indicators {
        margin-bottom: 0;
    }

    .carousel-indicators button {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin: 0 5px;
        background-color: #dee2e6;
        border: none;
    }

    .carousel-indicators button.active {
        background-color: #0d6efd;
    }

    .carousel-item {
        transition: transform 0.6s ease-in-out;
    }

    .carousel-item.active {
        display: block;
    }

    /* Animation for cards in carousel */
    .carousel-item .card {
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.5s ease;
    }

    .carousel-item.active .card {
        opacity: 1;
        transform: translateY(0);
    }

    .carousel-item .card:nth-child(1) { transition-delay: 0.1s; }
    .carousel-item .card:nth-child(2) { transition-delay: 0.2s; }
    .carousel-item .card:nth-child(3) { transition-delay: 0.3s; }
    .carousel-item .card:nth-child(4) { transition-delay: 0.4s; }

    /* Best Sellers Section Styles */
    .best-sellers-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 2rem;
        border-radius: 1rem;
    }

    .section-header {
        margin-bottom: 2rem;
    }

    .section-header p {
        font-size: 1.1rem;
        max-width: 600px;
        margin: 0 auto;
    }

    .call-popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(255, 255, 255, 0.98);
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        display: none;
        width: 360px;
        text-align: center;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .popup-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .avatar {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        margin: 0 auto 1.5rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        animation: pulse 2s infinite;
    }

    .popup-buttons {
        display: flex;
        gap: 1.5rem;
        justify-content: center;
        margin-top: 1.5rem;
    }

    .popup-buttons button {
        transition: all 0.3s ease;
    }

    .popup-buttons button:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
    }

    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    .call-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
        z-index: 999;
        display: none;
    }
</style>

@section Scripts {
    <script>
        // Initialize carousel with custom settings
        document.addEventListener('DOMContentLoaded', function() {
            var carousel = new bootstrap.Carousel(document.getElementById('bestSellersCarousel'), {
                interval: 5000,
                wrap: true,
                keyboard: true,
                pause: 'hover'
            });

            // Xử lý sự kiện khi modal được mở
            var requestContactModal = document.getElementById('requestContactModal');
            requestContactModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var caregiverId = button.getAttribute('data-caregiver-id');
                var caregiverName = button.getAttribute('data-caregiver-name');
                
                document.getElementById('caregiverId').value = caregiverId;
                document.getElementById('requestContactModalLabel').textContent = `Yêu cầu liên hệ với ${caregiverName}`;
            });

            // Xử lý sự kiện gửi yêu cầu liên hệ
            document.getElementById('sendRequestBtn').addEventListener('click', async function() {
                const caregiverId = document.getElementById('caregiverId').value;
                const message = document.getElementById('message').value;

                if (!message.trim()) {
                    alert('Vui lòng nhập lời nhắn!');
                    return;
                }

                try {
                    const response = await fetch('/api/notifications/request-contact', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({
                            caregiverId: caregiverId,
                            message: message
                        })
                    });

                    if (response.ok) {
                        alert('Yêu cầu liên hệ đã được gửi thành công!');
                        var modal = bootstrap.Modal.getInstance(document.getElementById('requestContactModal'));
                        modal.hide();
                        document.getElementById('message').value = '';
                    } else {
                        const errorData = await response.json();
                        alert(errorData.message || 'Có lỗi xảy ra khi gửi yêu cầu. Vui lòng thử lại sau.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi gửi yêu cầu. Vui lòng thử lại sau.');
                }
            });
        });
    </script>
}